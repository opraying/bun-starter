name: Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write

env:
  ZEABUR_PROJECT_ID: 66c8a3c25021db4b95b4cefa
  ZEABUR_SERVICE_ID: 66c95f1ceff984d87b2c17c4

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-${{ matrix.bun }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.bun }}-bun-

    - name: Use Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install

    - name: Lint
      run: bun run lint

    - name: Type check
      run: bun run typecheck

    - name: Build
      run: bun run build

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
        file: ./Dockerfile

    - name: Delete old images
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const packageName = repo.toLowerCase();

          core.info('Fetching package versions...');
          try {
            const { data: versions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: packageName,
              org: owner
            });

            // Find the latest version (should be the one we just pushed)
            const latestVersion = versions.find(v => v.metadata.container.tags.includes('latest'));

            if (!latestVersion) {
              core.setFailed('Could not find the latest version');
              return;
            }

            // Filter out versions that are not the latest
            const versionsToDelete = versions.filter(v => v.id !== latestVersion.id);

            if (versionsToDelete.length === 0) {
              core.info('No old images to delete');
              return;
            }

            // Delete old versions
            for (const version of versionsToDelete) {
              core.info(`Deleting image with ID: ${version.id}`);
              try {
                await github.rest.packages.deletePackageVersionForOrg({
                  package_type: 'container',
                  package_name: packageName,
                  org: owner,
                  package_version_id: version.id
                });
                core.info(`Successfully deleted image with ID: ${version.id}`);
              } catch (deleteError) {
                core.warning(`Failed to delete image with ID: ${version.id}. Error: ${deleteError.message}`);
              }
            }

            core.info('Finished deleting old images');
          } catch (error) {
            core.setFailed(`Error: ${error.message}`);
          }

    - name: Update Zeabur Service
      env:
        ZEABUR_KEY: ${{ secrets.ZEABUR_KEY }}
        DISCORD_DEPLOY_WEBHOOK: ${{ secrets.DISCORD_DEPLOY_WEBHOOK }}
      run: |
        bun x zeabur auth login --token ${ZEABUR_KEY}
        bun x zeabur context set project --id ${ZEABUR_PROJECT_ID} --yes
        bun x zeabur service update tag --tag latest --id ${ZEABUR_SERVICE_ID} --yes
        curl -X POST -H "Content-Type: application/json" -d '{"content": "${{ github.event.repository.name }} has been released"}' ${DISCORD_DEPLOY_WEBHOOK}